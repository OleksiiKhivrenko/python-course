OOD - object oriented design (отношения между зависимостями)
ООА - это оценка того какие проблема должна решать система, и какие сущности у нас вообще существуют
 (допустим при проектировании интернет-магазина нужно понимать, что у нас будут сущности пользователя, товара, заказа, итд.)

ООД - Это проектирование необходимых классов и того как они будут взаимодействовать.
(Понимание, что заказ будет совершать пользователь, и при этом заказ может быть розничным и оптовым,
и для того что бы их просчитать нам необходима различная логика, и какие паттерны мы можем применить (об этом немного позже))

ООП - В этой схеме это конкретная реализация того что было продумано на этапе ООД, основываясь на принципах ООП (Садимся и пишем код)

KISS - keep it simple stupid
- simple is better than complex
- complex is better than complicated

DRY - don't repeat yourself
- не дублируйте код
- не дублируйте источники информации

YAGNI - You Ain't Gonna Need It
- не проектируйте лишнего
- не пишите "на будущее", "вдруг потом пригодиться"

SOLID

SRP - Single Responsibility Principle (принцип единой ответсвенности)
изменение в модули должны исходить из потребностей только одного актера

Open Closed principle (открыт для расширения, но закрыт для изменения)

Liskov Substitution (if it looks like a duck, swim like a duck, but it need batteries you probably have to wrong
abstraction)
---------------
Vehicle
- start engine
- get speed

Car
Boat
Plane

vehs = [c, b, b]
for v in vehs:
v.start_engine()


Bicycle ? (нарушение принципа Liskov)
--------------

Interface Segregation (Програмист не должен реализовать те методы которые не нужны)

Dependency Inversion (мы не должны зависить от реализации, мы должны зависеть от абстракции)


